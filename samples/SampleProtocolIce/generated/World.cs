// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `World.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [_System.Serializable]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class WorldException : Ice.UserException
        {
            #region Constructors

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public WorldException()
            {
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public WorldException(_System.Exception ex) : base(ex)
            {
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public WorldException(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #endregion

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override string ice_id()
            {
                return "::FootStone::GrainInterfaces::WorldException";
            }

            #region Object members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                IceInternal.HashUtil.hashAdd(ref h_, "::FootStone::GrainInterfaces::WorldException");
                return h_;
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override bool Equals(object other)
            {
                if(other == null)
                {
                    return false;
                }
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                WorldException o = other as WorldException;
                if(o == null)
                {
                    return false;
                }
                return true;
            }

            #endregion

            #region Comparison members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static bool operator==(WorldException lhs, WorldException rhs)
            {
                return Equals(lhs, rhs);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static bool operator!=(WorldException lhs, WorldException rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::FootStone::GrainInterfaces::WorldException", -1, true);
                ostr_.endSlice();
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
            }

            #endregion
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [_System.Serializable]
        public partial class ServerInfo : _System.ICloneable
        {
            #region Slice data members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public int id;

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public string name;

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public int status;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public ServerInfo()
            {
                this.name = "";
                ice_initialize();
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public ServerInfo(int id, string name, int status)
            {
                this.id = id;
                this.name = name;
                this.status = status;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                IceInternal.HashUtil.hashAdd(ref h_, "::FootStone::GrainInterfaces::ServerInfo");
                IceInternal.HashUtil.hashAdd(ref h_, id);
                IceInternal.HashUtil.hashAdd(ref h_, name);
                IceInternal.HashUtil.hashAdd(ref h_, status);
                return h_;
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                ServerInfo o = (ServerInfo)other;
                if(!this.id.Equals(o.id))
                {
                    return false;
                }
                if(this.name == null)
                {
                    if(o.name != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.name.Equals(o.name))
                    {
                        return false;
                    }
                }
                if(!this.status.Equals(o.status))
                {
                    return false;
                }
                return true;
            }

            #endregion

            #region Comparison members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static bool operator==(ServerInfo lhs, ServerInfo rhs)
            {
                return Equals(lhs, rhs);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static bool operator!=(ServerInfo lhs, ServerInfo rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public void ice_writeMembers(Ice.OutputStream ostr)
            {
                ostr.writeInt(this.id);
                ostr.writeString(this.name);
                ostr.writeInt(this.status);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public void ice_readMembers(Ice.InputStream istr)
            {
                this.id = istr.readInt();
                this.name = istr.readString();
                this.status = istr.readInt();
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static void ice_write(Ice.OutputStream ostr, ServerInfo v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static ServerInfo ice_read(Ice.InputStream istr)
            {
                var v = new ServerInfo();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly ServerInfo _nullMarshalValue = new ServerInfo();

            #endregion
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [_System.Serializable]
        public partial class PlayerShortInfo : _System.ICloneable
        {
            #region Slice data members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public string playerId;

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public string name;

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public int gender;

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public int modelId;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public PlayerShortInfo()
            {
                this.playerId = "";
                this.name = "";
                ice_initialize();
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public PlayerShortInfo(string playerId, string name, int gender, int modelId)
            {
                this.playerId = playerId;
                this.name = name;
                this.gender = gender;
                this.modelId = modelId;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                IceInternal.HashUtil.hashAdd(ref h_, "::FootStone::GrainInterfaces::PlayerShortInfo");
                IceInternal.HashUtil.hashAdd(ref h_, playerId);
                IceInternal.HashUtil.hashAdd(ref h_, name);
                IceInternal.HashUtil.hashAdd(ref h_, gender);
                IceInternal.HashUtil.hashAdd(ref h_, modelId);
                return h_;
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                PlayerShortInfo o = (PlayerShortInfo)other;
                if(this.playerId == null)
                {
                    if(o.playerId != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.playerId.Equals(o.playerId))
                    {
                        return false;
                    }
                }
                if(this.name == null)
                {
                    if(o.name != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.name.Equals(o.name))
                    {
                        return false;
                    }
                }
                if(!this.gender.Equals(o.gender))
                {
                    return false;
                }
                if(!this.modelId.Equals(o.modelId))
                {
                    return false;
                }
                return true;
            }

            #endregion

            #region Comparison members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static bool operator==(PlayerShortInfo lhs, PlayerShortInfo rhs)
            {
                return Equals(lhs, rhs);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static bool operator!=(PlayerShortInfo lhs, PlayerShortInfo rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public void ice_writeMembers(Ice.OutputStream ostr)
            {
                ostr.writeString(this.playerId);
                ostr.writeString(this.name);
                ostr.writeInt(this.gender);
                ostr.writeInt(this.modelId);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public void ice_readMembers(Ice.InputStream istr)
            {
                this.playerId = istr.readString();
                this.name = istr.readString();
                this.gender = istr.readInt();
                this.modelId = istr.readInt();
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static void ice_write(Ice.OutputStream ostr, PlayerShortInfo v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static PlayerShortInfo ice_read(Ice.InputStream istr)
            {
                var v = new PlayerShortInfo();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly PlayerShortInfo _nullMarshalValue = new PlayerShortInfo();

            #endregion
        }

        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface World : Ice.Object, WorldOperations_
        {
        }
    }
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public delegate void Callback_World_GetServerListRequest(_System.Collections.Generic.List<ServerInfo> ret);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public delegate void Callback_World_GetPlayerListRequest(_System.Collections.Generic.List<PlayerShortInfo> ret);
    }
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public interface WorldPrx : Ice.ObjectPrx
        {
            _System.Collections.Generic.List<ServerInfo> GetServerListRequest(Ice.OptionalContext context = new Ice.OptionalContext());

            _System.Threading.Tasks.Task<_System.Collections.Generic.List<ServerInfo>> GetServerListRequestAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

            Ice.AsyncResult<Callback_World_GetServerListRequest> begin_GetServerListRequest(Ice.OptionalContext context = new Ice.OptionalContext());

            Ice.AsyncResult begin_GetServerListRequest(Ice.AsyncCallback callback, object cookie);

            Ice.AsyncResult begin_GetServerListRequest(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

            _System.Collections.Generic.List<ServerInfo> end_GetServerListRequest(Ice.AsyncResult asyncResult);

            _System.Collections.Generic.List<PlayerShortInfo> GetPlayerListRequest(int serverId, Ice.OptionalContext context = new Ice.OptionalContext());

            _System.Threading.Tasks.Task<_System.Collections.Generic.List<PlayerShortInfo>> GetPlayerListRequestAsync(int serverId, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

            Ice.AsyncResult<Callback_World_GetPlayerListRequest> begin_GetPlayerListRequest(int serverId, Ice.OptionalContext context = new Ice.OptionalContext());

            Ice.AsyncResult begin_GetPlayerListRequest(int serverId, Ice.AsyncCallback callback, object cookie);

            Ice.AsyncResult begin_GetPlayerListRequest(int serverId, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

            _System.Collections.Generic.List<PlayerShortInfo> end_GetPlayerListRequest(Ice.AsyncResult asyncResult);
        }
    }
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public interface WorldOperations_
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            _System.Threading.Tasks.Task<_System.Collections.Generic.List<ServerInfo>> GetServerListRequestAsync(Ice.Current current = null);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            _System.Threading.Tasks.Task<_System.Collections.Generic.List<PlayerShortInfo>> GetPlayerListRequestAsync(int serverId, Ice.Current current = null);
        }
    }
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public sealed class ServerListHelper
        {
            public static void write(Ice.OutputStream ostr, _System.Collections.Generic.List<ServerInfo> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        (v[ix] == null ? new ServerInfo() : v[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static _System.Collections.Generic.List<ServerInfo> read(Ice.InputStream istr)
            {
                _System.Collections.Generic.List<ServerInfo> v;
                {
                    int szx = istr.readAndCheckSeqSize(9);
                    v = new _System.Collections.Generic.List<ServerInfo>(szx);
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        ServerInfo val = new ServerInfo();
                        val.ice_readMembers(istr);
                        v.Add(val);
                    }
                }
                return v;
            }
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public sealed class PlayerListHelper
        {
            public static void write(Ice.OutputStream ostr, _System.Collections.Generic.List<PlayerShortInfo> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        (v[ix] == null ? new PlayerShortInfo() : v[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static _System.Collections.Generic.List<PlayerShortInfo> read(Ice.InputStream istr)
            {
                _System.Collections.Generic.List<PlayerShortInfo> v;
                {
                    int szx = istr.readAndCheckSeqSize(10);
                    v = new _System.Collections.Generic.List<PlayerShortInfo>(szx);
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        PlayerShortInfo val = new PlayerShortInfo();
                        val.ice_readMembers(istr);
                        v.Add(val);
                    }
                }
                return v;
            }
        }

        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        [_System.Serializable]
        public sealed class WorldPrxHelper : Ice.ObjectPrxHelperBase, WorldPrx
        {
            public WorldPrxHelper()
            {
            }

            public WorldPrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public _System.Collections.Generic.List<PlayerShortInfo> GetPlayerListRequest(int serverId, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                try
                {
                    return _iceI_GetPlayerListRequestAsync(serverId, context, null, _System.Threading.CancellationToken.None, true).Result;
                }
                catch(_System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public _System.Collections.Generic.List<ServerInfo> GetServerListRequest(Ice.OptionalContext context = new Ice.OptionalContext())
            {
                try
                {
                    return _iceI_GetServerListRequestAsync(context, null, _System.Threading.CancellationToken.None, true).Result;
                }
                catch(_System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public _System.Threading.Tasks.Task<_System.Collections.Generic.List<PlayerShortInfo>> GetPlayerListRequestAsync(int serverId, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
            {
                return _iceI_GetPlayerListRequestAsync(serverId, context, progress, cancel, false);
            }

            private _System.Threading.Tasks.Task<_System.Collections.Generic.List<PlayerShortInfo>> _iceI_GetPlayerListRequestAsync(int iceP_serverId, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_GetPlayerListRequest_name);
                var completed = new IceInternal.OperationTaskCompletionCallback<_System.Collections.Generic.List<PlayerShortInfo>>(progress, cancel);
                _iceI_GetPlayerListRequest(iceP_serverId, context, synchronous, completed);
                return completed.Task;
            }

            private const string _GetPlayerListRequest_name = "GetPlayerListRequest";

            private void _iceI_GetPlayerListRequest(int iceP_serverId, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<_System.Collections.Generic.List<PlayerShortInfo>>(completed);
                outAsync.invoke(
                    _GetPlayerListRequest_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_serverId);
                    },
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(WorldException)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        _System.Collections.Generic.List<PlayerShortInfo> ret;
                        ret = PlayerListHelper.read(istr);
                        return ret;
                    });
            }

            public _System.Threading.Tasks.Task<_System.Collections.Generic.List<ServerInfo>> GetServerListRequestAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
            {
                return _iceI_GetServerListRequestAsync(context, progress, cancel, false);
            }

            private _System.Threading.Tasks.Task<_System.Collections.Generic.List<ServerInfo>> _iceI_GetServerListRequestAsync(Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_GetServerListRequest_name);
                var completed = new IceInternal.OperationTaskCompletionCallback<_System.Collections.Generic.List<ServerInfo>>(progress, cancel);
                _iceI_GetServerListRequest(context, synchronous, completed);
                return completed.Task;
            }

            private const string _GetServerListRequest_name = "GetServerListRequest";

            private void _iceI_GetServerListRequest(_System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<_System.Collections.Generic.List<ServerInfo>>(completed);
                outAsync.invoke(
                    _GetServerListRequest_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(WorldException)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        _System.Collections.Generic.List<ServerInfo> ret;
                        ret = ServerListHelper.read(istr);
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public Ice.AsyncResult<Callback_World_GetPlayerListRequest> begin_GetPlayerListRequest(int serverId, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                return begin_GetPlayerListRequest(serverId, context, null, null, false);
            }

            public Ice.AsyncResult begin_GetPlayerListRequest(int serverId, Ice.AsyncCallback callback, object cookie)
            {
                return begin_GetPlayerListRequest(serverId, new Ice.OptionalContext(), callback, cookie, false);
            }

            public Ice.AsyncResult begin_GetPlayerListRequest(int serverId, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
            {
                return begin_GetPlayerListRequest(serverId, context, callback, cookie, false);
            }

            public _System.Collections.Generic.List<PlayerShortInfo> end_GetPlayerListRequest(Ice.AsyncResult asyncResult)
            {
                var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _GetPlayerListRequest_name);
                var outgoing_ = (IceInternal.OutgoingAsyncT<_System.Collections.Generic.List<PlayerShortInfo>>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private Ice.AsyncResult<Callback_World_GetPlayerListRequest> begin_GetPlayerListRequest(int iceP_serverId, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_GetPlayerListRequest_name);
                var completed = new IceInternal.OperationAsyncResultCompletionCallback<Callback_World_GetPlayerListRequest, _System.Collections.Generic.List<PlayerShortInfo>>(
                    (Callback_World_GetPlayerListRequest cb, _System.Collections.Generic.List<PlayerShortInfo> ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _GetPlayerListRequest_name, cookie, completedCallback);
                _iceI_GetPlayerListRequest(iceP_serverId, context, synchronous, completed);
                return completed;
            }

            public Ice.AsyncResult<Callback_World_GetServerListRequest> begin_GetServerListRequest(Ice.OptionalContext context = new Ice.OptionalContext())
            {
                return begin_GetServerListRequest(context, null, null, false);
            }

            public Ice.AsyncResult begin_GetServerListRequest(Ice.AsyncCallback callback, object cookie)
            {
                return begin_GetServerListRequest(new Ice.OptionalContext(), callback, cookie, false);
            }

            public Ice.AsyncResult begin_GetServerListRequest(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
            {
                return begin_GetServerListRequest(context, callback, cookie, false);
            }

            public _System.Collections.Generic.List<ServerInfo> end_GetServerListRequest(Ice.AsyncResult asyncResult)
            {
                var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _GetServerListRequest_name);
                var outgoing_ = (IceInternal.OutgoingAsyncT<_System.Collections.Generic.List<ServerInfo>>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private Ice.AsyncResult<Callback_World_GetServerListRequest> begin_GetServerListRequest(_System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_GetServerListRequest_name);
                var completed = new IceInternal.OperationAsyncResultCompletionCallback<Callback_World_GetServerListRequest, _System.Collections.Generic.List<ServerInfo>>(
                    (Callback_World_GetServerListRequest cb, _System.Collections.Generic.List<ServerInfo> ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _GetServerListRequest_name, cookie, completedCallback);
                _iceI_GetServerListRequest(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static WorldPrx checkedCast(Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                WorldPrx r = b as WorldPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    WorldPrxHelper h = new WorldPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static WorldPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                WorldPrx r = b as WorldPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    WorldPrxHelper h = new WorldPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static WorldPrx checkedCast(Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        WorldPrxHelper h = new WorldPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static WorldPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        WorldPrxHelper h = new WorldPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static WorldPrx uncheckedCast(Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                WorldPrx r = b as WorldPrx;
                if(r == null)
                {
                    WorldPrxHelper h = new WorldPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static WorldPrx uncheckedCast(Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                WorldPrxHelper h = new WorldPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::FootStone::GrainInterfaces::World",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(Ice.OutputStream ostr, WorldPrx v)
            {
                ostr.writeProxy(v);
            }

            public static WorldPrx read(Ice.InputStream istr)
            {
                Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    WorldPrxHelper result = new WorldPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public abstract class WorldDisp_ : Ice.ObjectImpl, World
        {
            #region Slice operations

            public abstract _System.Threading.Tasks.Task<_System.Collections.Generic.List<ServerInfo>> GetServerListRequestAsync(Ice.Current current = null);

            public abstract _System.Threading.Tasks.Task<_System.Collections.Generic.List<PlayerShortInfo>> GetPlayerListRequestAsync(int serverId, Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::FootStone::GrainInterfaces::World",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, Ice.Current current = null)
            {
                return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static _System.Threading.Tasks.Task<Ice.OutputStream>
            iceD_GetServerListRequest(World obj, IceInternal.Incoming inS, Ice.Current current)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setResultTask<_System.Collections.Generic.List<ServerInfo>>(obj.GetServerListRequestAsync(current),
                    (ostr, ret) =>
                    {
                        ServerListHelper.write(ostr, ret);
                    });
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static _System.Threading.Tasks.Task<Ice.OutputStream>
            iceD_GetPlayerListRequest(World obj, IceInternal.Incoming inS, Ice.Current current)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                int iceP_serverId;
                iceP_serverId = istr.readInt();
                inS.endReadParams();
                return inS.setResultTask<_System.Collections.Generic.List<PlayerShortInfo>>(obj.GetPlayerListRequestAsync(iceP_serverId, current),
                    (ostr, ret) =>
                    {
                        PlayerListHelper.write(ostr, ret);
                    });
            }

            private static readonly string[] _all =
            {
                "GetPlayerListRequest",
                "GetServerListRequest",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override _System.Threading.Tasks.Task<Ice.OutputStream>
            iceDispatch(IceInternal.Incoming inS, Ice.Current current)
            {
                int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_GetPlayerListRequest(this, inS, current);
                    }
                    case 1:
                    {
                        return iceD_GetServerListRequest(this, inS, current);
                    }
                    case 2:
                    {
                        return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 3:
                    {
                        return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 4:
                    {
                        return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 5:
                    {
                        return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                _System.Diagnostics.Debug.Assert(false);
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }
    }
}
