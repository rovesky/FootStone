// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `Zone.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [_System.Serializable]
        public partial class EndPointZone : _System.ICloneable
        {
            #region Slice data members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public string ip;

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public int port;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public EndPointZone()
            {
                this.ip = "";
                ice_initialize();
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public EndPointZone(string ip, int port)
            {
                this.ip = ip;
                this.port = port;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                IceInternal.HashUtil.hashAdd(ref h_, "::FootStone::GrainInterfaces::EndPointZone");
                IceInternal.HashUtil.hashAdd(ref h_, ip);
                IceInternal.HashUtil.hashAdd(ref h_, port);
                return h_;
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                EndPointZone o = (EndPointZone)other;
                if(this.ip == null)
                {
                    if(o.ip != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.ip.Equals(o.ip))
                    {
                        return false;
                    }
                }
                if(!this.port.Equals(o.port))
                {
                    return false;
                }
                return true;
            }

            #endregion

            #region Comparison members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static bool operator==(EndPointZone lhs, EndPointZone rhs)
            {
                return Equals(lhs, rhs);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static bool operator!=(EndPointZone lhs, EndPointZone rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public void ice_writeMembers(Ice.OutputStream ostr)
            {
                ostr.writeString(this.ip);
                ostr.writeInt(this.port);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public void ice_readMembers(Ice.InputStream istr)
            {
                this.ip = istr.readString();
                this.port = istr.readInt();
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static void ice_write(Ice.OutputStream ostr, EndPointZone v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static EndPointZone ice_read(Ice.InputStream istr)
            {
                var v = new EndPointZone();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly EndPointZone _nullMarshalValue = new EndPointZone();

            #endregion
        }

        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface IZonePush : Ice.Object, IZonePushOperations_
        {
        }

        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface IZone : Ice.Object, IZoneOperations_
        {
        }
    }
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public delegate void Callback_IZonePush_RecvData();

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public delegate void Callback_IZone_SendData();

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public delegate void Callback_IZone_BindZone(EndPointZone ret);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public delegate void Callback_IZone_PlayerEnter();

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public delegate void Callback_IZone_PlayerLeave();
    }
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public interface IZonePushPrx : Ice.ObjectPrx
        {
            void RecvData(byte[] data, Ice.OptionalContext context = new Ice.OptionalContext());

            _System.Threading.Tasks.Task RecvDataAsync(byte[] data, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

            Ice.AsyncResult<Callback_IZonePush_RecvData> begin_RecvData(byte[] data, Ice.OptionalContext context = new Ice.OptionalContext());

            Ice.AsyncResult begin_RecvData(byte[] data, Ice.AsyncCallback callback, object cookie);

            Ice.AsyncResult begin_RecvData(byte[] data, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

            void end_RecvData(Ice.AsyncResult asyncResult);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public interface IZonePrx : Ice.ObjectPrx
        {
            void SendData(byte[] data, Ice.OptionalContext context = new Ice.OptionalContext());

            _System.Threading.Tasks.Task SendDataAsync(byte[] data, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

            Ice.AsyncResult<Callback_IZone_SendData> begin_SendData(byte[] data, Ice.OptionalContext context = new Ice.OptionalContext());

            Ice.AsyncResult begin_SendData(byte[] data, Ice.AsyncCallback callback, object cookie);

            Ice.AsyncResult begin_SendData(byte[] data, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

            void end_SendData(Ice.AsyncResult asyncResult);

            EndPointZone BindZone(string zoneId, string playerId, Ice.OptionalContext context = new Ice.OptionalContext());

            _System.Threading.Tasks.Task<EndPointZone> BindZoneAsync(string zoneId, string playerId, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

            Ice.AsyncResult<Callback_IZone_BindZone> begin_BindZone(string zoneId, string playerId, Ice.OptionalContext context = new Ice.OptionalContext());

            Ice.AsyncResult begin_BindZone(string zoneId, string playerId, Ice.AsyncCallback callback, object cookie);

            Ice.AsyncResult begin_BindZone(string zoneId, string playerId, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

            EndPointZone end_BindZone(Ice.AsyncResult asyncResult);

            void PlayerEnter(Ice.OptionalContext context = new Ice.OptionalContext());

            _System.Threading.Tasks.Task PlayerEnterAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

            Ice.AsyncResult<Callback_IZone_PlayerEnter> begin_PlayerEnter(Ice.OptionalContext context = new Ice.OptionalContext());

            Ice.AsyncResult begin_PlayerEnter(Ice.AsyncCallback callback, object cookie);

            Ice.AsyncResult begin_PlayerEnter(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

            void end_PlayerEnter(Ice.AsyncResult asyncResult);

            void PlayerLeave(Ice.OptionalContext context = new Ice.OptionalContext());

            _System.Threading.Tasks.Task PlayerLeaveAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

            Ice.AsyncResult<Callback_IZone_PlayerLeave> begin_PlayerLeave(Ice.OptionalContext context = new Ice.OptionalContext());

            Ice.AsyncResult begin_PlayerLeave(Ice.AsyncCallback callback, object cookie);

            Ice.AsyncResult begin_PlayerLeave(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

            void end_PlayerLeave(Ice.AsyncResult asyncResult);
        }
    }
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public interface IZonePushOperations_
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            void RecvData(byte[] data, Ice.Current current = null);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public interface IZoneOperations_
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            _System.Threading.Tasks.Task SendDataAsync(byte[] data, Ice.Current current = null);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            _System.Threading.Tasks.Task<EndPointZone> BindZoneAsync(string zoneId, string playerId, Ice.Current current = null);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            _System.Threading.Tasks.Task PlayerEnterAsync(Ice.Current current = null);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            _System.Threading.Tasks.Task PlayerLeaveAsync(Ice.Current current = null);
        }
    }
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public sealed class BytesHelper
        {
            public static void write(Ice.OutputStream ostr, byte[] v)
            {
                ostr.writeByteSeq(v);
            }

            public static byte[] read(Ice.InputStream istr)
            {
                byte[] v;
                v = istr.readByteSeq();
                return v;
            }
        }

        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        [_System.Serializable]
        public sealed class IZonePushPrxHelper : Ice.ObjectPrxHelperBase, IZonePushPrx
        {
            public IZonePushPrxHelper()
            {
            }

            public IZonePushPrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public void RecvData(byte[] data, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                try
                {
                    _iceI_RecvDataAsync(data, context, null, _System.Threading.CancellationToken.None, true).Wait();
                }
                catch(_System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public _System.Threading.Tasks.Task RecvDataAsync(byte[] data, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
            {
                return _iceI_RecvDataAsync(data, context, progress, cancel, false);
            }

            private _System.Threading.Tasks.Task _iceI_RecvDataAsync(byte[] iceP_data, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_RecvData(iceP_data, context, synchronous, completed);
                return completed.Task;
            }

            private const string _RecvData_name = "RecvData";

            private void _iceI_RecvData(byte[] iceP_data, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _RecvData_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        BytesHelper.write(ostr, iceP_data);
                    });
            }

            #endregion

            #region Asynchronous operations

            public Ice.AsyncResult<Callback_IZonePush_RecvData> begin_RecvData(byte[] data, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                return begin_RecvData(data, context, null, null, false);
            }

            public Ice.AsyncResult begin_RecvData(byte[] data, Ice.AsyncCallback callback, object cookie)
            {
                return begin_RecvData(data, new Ice.OptionalContext(), callback, cookie, false);
            }

            public Ice.AsyncResult begin_RecvData(byte[] data, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
            {
                return begin_RecvData(data, context, callback, cookie, false);
            }

            public void end_RecvData(Ice.AsyncResult asyncResult)
            {
                var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _RecvData_name);
                ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private Ice.AsyncResult<Callback_IZonePush_RecvData> begin_RecvData(byte[] iceP_data, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new IceInternal.OperationAsyncResultCompletionCallback<Callback_IZonePush_RecvData, object>(
                    (Callback_IZonePush_RecvData cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _RecvData_name, cookie, completedCallback);
                _iceI_RecvData(iceP_data, context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static IZonePushPrx checkedCast(Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                IZonePushPrx r = b as IZonePushPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    IZonePushPrxHelper h = new IZonePushPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static IZonePushPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                IZonePushPrx r = b as IZonePushPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    IZonePushPrxHelper h = new IZonePushPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static IZonePushPrx checkedCast(Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        IZonePushPrxHelper h = new IZonePushPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static IZonePushPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        IZonePushPrxHelper h = new IZonePushPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static IZonePushPrx uncheckedCast(Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                IZonePushPrx r = b as IZonePushPrx;
                if(r == null)
                {
                    IZonePushPrxHelper h = new IZonePushPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static IZonePushPrx uncheckedCast(Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                IZonePushPrxHelper h = new IZonePushPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::FootStone::GrainInterfaces::IZonePush",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(Ice.OutputStream ostr, IZonePushPrx v)
            {
                ostr.writeProxy(v);
            }

            public static IZonePushPrx read(Ice.InputStream istr)
            {
                Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    IZonePushPrxHelper result = new IZonePushPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        [_System.Serializable]
        public sealed class IZonePrxHelper : Ice.ObjectPrxHelperBase, IZonePrx
        {
            public IZonePrxHelper()
            {
            }

            public IZonePrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public EndPointZone BindZone(string zoneId, string playerId, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                try
                {
                    return _iceI_BindZoneAsync(zoneId, playerId, context, null, _System.Threading.CancellationToken.None, true).Result;
                }
                catch(_System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void PlayerEnter(Ice.OptionalContext context = new Ice.OptionalContext())
            {
                try
                {
                    _iceI_PlayerEnterAsync(context, null, _System.Threading.CancellationToken.None, true).Wait();
                }
                catch(_System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void PlayerLeave(Ice.OptionalContext context = new Ice.OptionalContext())
            {
                try
                {
                    _iceI_PlayerLeaveAsync(context, null, _System.Threading.CancellationToken.None, true).Wait();
                }
                catch(_System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void SendData(byte[] data, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                try
                {
                    _iceI_SendDataAsync(data, context, null, _System.Threading.CancellationToken.None, true).Wait();
                }
                catch(_System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public _System.Threading.Tasks.Task<EndPointZone> BindZoneAsync(string zoneId, string playerId, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
            {
                return _iceI_BindZoneAsync(zoneId, playerId, context, progress, cancel, false);
            }

            private _System.Threading.Tasks.Task<EndPointZone> _iceI_BindZoneAsync(string iceP_zoneId, string iceP_playerId, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_BindZone_name);
                var completed = new IceInternal.OperationTaskCompletionCallback<EndPointZone>(progress, cancel);
                _iceI_BindZone(iceP_zoneId, iceP_playerId, context, synchronous, completed);
                return completed.Task;
            }

            private const string _BindZone_name = "BindZone";

            private void _iceI_BindZone(string iceP_zoneId, string iceP_playerId, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<EndPointZone>(completed);
                outAsync.invoke(
                    _BindZone_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_zoneId);
                        ostr.writeString(iceP_playerId);
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        EndPointZone ret = null;
                        ret = EndPointZone.ice_read(istr);
                        return ret;
                    });
            }

            public _System.Threading.Tasks.Task PlayerEnterAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
            {
                return _iceI_PlayerEnterAsync(context, progress, cancel, false);
            }

            private _System.Threading.Tasks.Task _iceI_PlayerEnterAsync(Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_PlayerEnter(context, synchronous, completed);
                return completed.Task;
            }

            private const string _PlayerEnter_name = "PlayerEnter";

            private void _iceI_PlayerEnter(_System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _PlayerEnter_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public _System.Threading.Tasks.Task PlayerLeaveAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
            {
                return _iceI_PlayerLeaveAsync(context, progress, cancel, false);
            }

            private _System.Threading.Tasks.Task _iceI_PlayerLeaveAsync(Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_PlayerLeave(context, synchronous, completed);
                return completed.Task;
            }

            private const string _PlayerLeave_name = "PlayerLeave";

            private void _iceI_PlayerLeave(_System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _PlayerLeave_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous);
            }

            public _System.Threading.Tasks.Task SendDataAsync(byte[] data, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
            {
                return _iceI_SendDataAsync(data, context, progress, cancel, false);
            }

            private _System.Threading.Tasks.Task _iceI_SendDataAsync(byte[] iceP_data, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_SendData(iceP_data, context, synchronous, completed);
                return completed.Task;
            }

            private const string _SendData_name = "SendData";

            private void _iceI_SendData(byte[] iceP_data, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _SendData_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        BytesHelper.write(ostr, iceP_data);
                    });
            }

            #endregion

            #region Asynchronous operations

            public Ice.AsyncResult<Callback_IZone_BindZone> begin_BindZone(string zoneId, string playerId, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                return begin_BindZone(zoneId, playerId, context, null, null, false);
            }

            public Ice.AsyncResult begin_BindZone(string zoneId, string playerId, Ice.AsyncCallback callback, object cookie)
            {
                return begin_BindZone(zoneId, playerId, new Ice.OptionalContext(), callback, cookie, false);
            }

            public Ice.AsyncResult begin_BindZone(string zoneId, string playerId, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
            {
                return begin_BindZone(zoneId, playerId, context, callback, cookie, false);
            }

            public EndPointZone end_BindZone(Ice.AsyncResult asyncResult)
            {
                var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _BindZone_name);
                var outgoing_ = (IceInternal.OutgoingAsyncT<EndPointZone>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private Ice.AsyncResult<Callback_IZone_BindZone> begin_BindZone(string iceP_zoneId, string iceP_playerId, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_BindZone_name);
                var completed = new IceInternal.OperationAsyncResultCompletionCallback<Callback_IZone_BindZone, EndPointZone>(
                    (Callback_IZone_BindZone cb, EndPointZone ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _BindZone_name, cookie, completedCallback);
                _iceI_BindZone(iceP_zoneId, iceP_playerId, context, synchronous, completed);
                return completed;
            }

            public Ice.AsyncResult<Callback_IZone_PlayerEnter> begin_PlayerEnter(Ice.OptionalContext context = new Ice.OptionalContext())
            {
                return begin_PlayerEnter(context, null, null, false);
            }

            public Ice.AsyncResult begin_PlayerEnter(Ice.AsyncCallback callback, object cookie)
            {
                return begin_PlayerEnter(new Ice.OptionalContext(), callback, cookie, false);
            }

            public Ice.AsyncResult begin_PlayerEnter(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
            {
                return begin_PlayerEnter(context, callback, cookie, false);
            }

            public void end_PlayerEnter(Ice.AsyncResult asyncResult)
            {
                var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _PlayerEnter_name);
                ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private Ice.AsyncResult<Callback_IZone_PlayerEnter> begin_PlayerEnter(_System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new IceInternal.OperationAsyncResultCompletionCallback<Callback_IZone_PlayerEnter, object>(
                    (Callback_IZone_PlayerEnter cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _PlayerEnter_name, cookie, completedCallback);
                _iceI_PlayerEnter(context, synchronous, completed);
                return completed;
            }

            public Ice.AsyncResult<Callback_IZone_PlayerLeave> begin_PlayerLeave(Ice.OptionalContext context = new Ice.OptionalContext())
            {
                return begin_PlayerLeave(context, null, null, false);
            }

            public Ice.AsyncResult begin_PlayerLeave(Ice.AsyncCallback callback, object cookie)
            {
                return begin_PlayerLeave(new Ice.OptionalContext(), callback, cookie, false);
            }

            public Ice.AsyncResult begin_PlayerLeave(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
            {
                return begin_PlayerLeave(context, callback, cookie, false);
            }

            public void end_PlayerLeave(Ice.AsyncResult asyncResult)
            {
                var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _PlayerLeave_name);
                ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private Ice.AsyncResult<Callback_IZone_PlayerLeave> begin_PlayerLeave(_System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new IceInternal.OperationAsyncResultCompletionCallback<Callback_IZone_PlayerLeave, object>(
                    (Callback_IZone_PlayerLeave cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _PlayerLeave_name, cookie, completedCallback);
                _iceI_PlayerLeave(context, synchronous, completed);
                return completed;
            }

            public Ice.AsyncResult<Callback_IZone_SendData> begin_SendData(byte[] data, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                return begin_SendData(data, context, null, null, false);
            }

            public Ice.AsyncResult begin_SendData(byte[] data, Ice.AsyncCallback callback, object cookie)
            {
                return begin_SendData(data, new Ice.OptionalContext(), callback, cookie, false);
            }

            public Ice.AsyncResult begin_SendData(byte[] data, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
            {
                return begin_SendData(data, context, callback, cookie, false);
            }

            public void end_SendData(Ice.AsyncResult asyncResult)
            {
                var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _SendData_name);
                ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private Ice.AsyncResult<Callback_IZone_SendData> begin_SendData(byte[] iceP_data, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new IceInternal.OperationAsyncResultCompletionCallback<Callback_IZone_SendData, object>(
                    (Callback_IZone_SendData cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _SendData_name, cookie, completedCallback);
                _iceI_SendData(iceP_data, context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static IZonePrx checkedCast(Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                IZonePrx r = b as IZonePrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    IZonePrxHelper h = new IZonePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static IZonePrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                IZonePrx r = b as IZonePrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    IZonePrxHelper h = new IZonePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static IZonePrx checkedCast(Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        IZonePrxHelper h = new IZonePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static IZonePrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        IZonePrxHelper h = new IZonePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static IZonePrx uncheckedCast(Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                IZonePrx r = b as IZonePrx;
                if(r == null)
                {
                    IZonePrxHelper h = new IZonePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static IZonePrx uncheckedCast(Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                IZonePrxHelper h = new IZonePrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::FootStone::GrainInterfaces::IZone",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(Ice.OutputStream ostr, IZonePrx v)
            {
                ostr.writeProxy(v);
            }

            public static IZonePrx read(Ice.InputStream istr)
            {
                Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    IZonePrxHelper result = new IZonePrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public abstract class IZonePushDisp_ : Ice.ObjectImpl, IZonePush
        {
            #region Slice operations

            public abstract void RecvData(byte[] data, Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::FootStone::GrainInterfaces::IZonePush",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, Ice.Current current = null)
            {
                return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static _System.Threading.Tasks.Task<Ice.OutputStream>
            iceD_RecvData(IZonePush obj, IceInternal.Incoming inS, Ice.Current current)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                byte[] iceP_data;
                iceP_data = BytesHelper.read(istr);
                inS.endReadParams();
                obj.RecvData(iceP_data, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            private static readonly string[] _all =
            {
                "RecvData",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override _System.Threading.Tasks.Task<Ice.OutputStream>
            iceDispatch(IceInternal.Incoming inS, Ice.Current current)
            {
                int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_RecvData(this, inS, current);
                    }
                    case 1:
                    {
                        return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 2:
                    {
                        return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 3:
                    {
                        return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 4:
                    {
                        return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                _System.Diagnostics.Debug.Assert(false);
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public abstract class IZoneDisp_ : Ice.ObjectImpl, IZone
        {
            #region Slice operations

            public abstract _System.Threading.Tasks.Task SendDataAsync(byte[] data, Ice.Current current = null);

            public abstract _System.Threading.Tasks.Task<EndPointZone> BindZoneAsync(string zoneId, string playerId, Ice.Current current = null);

            public abstract _System.Threading.Tasks.Task PlayerEnterAsync(Ice.Current current = null);

            public abstract _System.Threading.Tasks.Task PlayerLeaveAsync(Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::FootStone::GrainInterfaces::IZone",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, Ice.Current current = null)
            {
                return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static _System.Threading.Tasks.Task<Ice.OutputStream>
            iceD_SendData(IZone obj, IceInternal.Incoming inS, Ice.Current current)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                byte[] iceP_data;
                iceP_data = BytesHelper.read(istr);
                inS.endReadParams();
                return inS.setResultTask(obj.SendDataAsync(iceP_data, current));
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static _System.Threading.Tasks.Task<Ice.OutputStream>
            iceD_BindZone(IZone obj, IceInternal.Incoming inS, Ice.Current current)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string iceP_zoneId;
                string iceP_playerId;
                iceP_zoneId = istr.readString();
                iceP_playerId = istr.readString();
                inS.endReadParams();
                return inS.setResultTask<EndPointZone>(obj.BindZoneAsync(iceP_zoneId, iceP_playerId, current),
                    (ostr, ret) =>
                    {
                        EndPointZone.ice_write(ostr, ret);
                    });
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static _System.Threading.Tasks.Task<Ice.OutputStream>
            iceD_PlayerEnter(IZone obj, IceInternal.Incoming inS, Ice.Current current)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setResultTask(obj.PlayerEnterAsync(current));
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static _System.Threading.Tasks.Task<Ice.OutputStream>
            iceD_PlayerLeave(IZone obj, IceInternal.Incoming inS, Ice.Current current)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                return inS.setResultTask(obj.PlayerLeaveAsync(current));
            }

            private static readonly string[] _all =
            {
                "BindZone",
                "PlayerEnter",
                "PlayerLeave",
                "SendData",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override _System.Threading.Tasks.Task<Ice.OutputStream>
            iceDispatch(IceInternal.Incoming inS, Ice.Current current)
            {
                int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_BindZone(this, inS, current);
                    }
                    case 1:
                    {
                        return iceD_PlayerEnter(this, inS, current);
                    }
                    case 2:
                    {
                        return iceD_PlayerLeave(this, inS, current);
                    }
                    case 3:
                    {
                        return iceD_SendData(this, inS, current);
                    }
                    case 4:
                    {
                        return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 5:
                    {
                        return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 6:
                    {
                        return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 7:
                    {
                        return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                _System.Diagnostics.Debug.Assert(false);
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }
    }
}
