// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `Player.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [_System.Serializable]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class PlayerNotExsit : Ice.UserException
        {
            #region Constructors

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public PlayerNotExsit()
            {
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public PlayerNotExsit(_System.Exception ex) : base(ex)
            {
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public PlayerNotExsit(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #endregion

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override string ice_id()
            {
                return "::FootStone::GrainInterfaces::PlayerNotExsit";
            }

            #region Object members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                IceInternal.HashUtil.hashAdd(ref h_, "::FootStone::GrainInterfaces::PlayerNotExsit");
                return h_;
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override bool Equals(object other)
            {
                if (other == null)
                {
                    return false;
                }
                if (object.ReferenceEquals(this, other))
                {
                    return true;
                }
                PlayerNotExsit o = other as PlayerNotExsit;
                if (o == null)
                {
                    return false;
                }
                return true;
            }

            #endregion

            #region Comparison members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static bool operator ==(PlayerNotExsit lhs, PlayerNotExsit rhs)
            {
                return Equals(lhs, rhs);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static bool operator !=(PlayerNotExsit lhs, PlayerNotExsit rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::FootStone::GrainInterfaces::PlayerNotExsit", -1, true);
                ostr_.endSlice();
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
            }

            #endregion
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [_System.Serializable]
        public partial class PlayerInfo : _System.ICloneable
        {
            #region Slice data members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public string Key;

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public string Name;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public PlayerInfo()
            {
                this.Key = "";
                this.Name = "";
                ice_initialize();
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public PlayerInfo(string Key, string Name)
            {
                this.Key = Key;
                this.Name = Name;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                IceInternal.HashUtil.hashAdd(ref h_, "::FootStone::GrainInterfaces::PlayerInfo");
                IceInternal.HashUtil.hashAdd(ref h_, Key);
                IceInternal.HashUtil.hashAdd(ref h_, Name);
                return h_;
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override bool Equals(object other)
            {
                if (object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if (other == null)
                {
                    return false;
                }
                if (GetType() != other.GetType())
                {
                    return false;
                }
                PlayerInfo o = (PlayerInfo)other;
                if (this.Key == null)
                {
                    if (o.Key != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if (!this.Key.Equals(o.Key))
                    {
                        return false;
                    }
                }
                if (this.Name == null)
                {
                    if (o.Name != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if (!this.Name.Equals(o.Name))
                    {
                        return false;
                    }
                }
                return true;
            }

            #endregion

            #region Comparison members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static bool operator ==(PlayerInfo lhs, PlayerInfo rhs)
            {
                return Equals(lhs, rhs);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static bool operator !=(PlayerInfo lhs, PlayerInfo rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public void ice_writeMembers(Ice.OutputStream ostr)
            {
                ostr.writeString(this.Key);
                ostr.writeString(this.Name);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public void ice_readMembers(Ice.InputStream istr)
            {
                this.Key = istr.readString();
                this.Name = istr.readString();
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static void ice_write(Ice.OutputStream ostr, PlayerInfo v)
            {
                if (v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static PlayerInfo ice_read(Ice.InputStream istr)
            {
                var v = new PlayerInfo();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly PlayerInfo _nullMarshalValue = new PlayerInfo();

            #endregion
        }

        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface Player : Ice.Object, PlayerOperations_
        {
        }
    }
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public delegate void Callback_Player_getPlayerInfo(PlayerInfo ret);
    }
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public interface PlayerPrx : Ice.ObjectPrx
        {
            PlayerInfo getPlayerInfo(string playerId, Ice.OptionalContext context = new Ice.OptionalContext());

            _System.Threading.Tasks.Task<PlayerInfo> getPlayerInfoAsync(string playerId, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

            Ice.AsyncResult<Callback_Player_getPlayerInfo> begin_getPlayerInfo(string playerId, Ice.OptionalContext context = new Ice.OptionalContext());

            Ice.AsyncResult begin_getPlayerInfo(string playerId, Ice.AsyncCallback callback, object cookie);

            Ice.AsyncResult begin_getPlayerInfo(string playerId, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

            PlayerInfo end_getPlayerInfo(Ice.AsyncResult asyncResult);
        }
    }
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public interface PlayerOperations_
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            _System.Threading.Tasks.Task<PlayerInfo> getPlayerInfoAsync(string playerId, Ice.Current current = null);
        }
    }
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        [_System.Serializable]
        public sealed class PlayerPrxHelper : Ice.ObjectPrxHelperBase, PlayerPrx
        {
            public PlayerPrxHelper()
            {
            }

            public PlayerPrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public PlayerInfo getPlayerInfo(string playerId, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getPlayerInfoAsync(playerId, context, null, _System.Threading.CancellationToken.None, true).Result;
                }
                catch (_System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public _System.Threading.Tasks.Task<PlayerInfo> getPlayerInfoAsync(string playerId, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
            {
                return _iceI_getPlayerInfoAsync(playerId, context, progress, cancel, false);
            }

            private _System.Threading.Tasks.Task<PlayerInfo> _iceI_getPlayerInfoAsync(string iceP_playerId, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getPlayerInfo_name);
                var completed = new IceInternal.OperationTaskCompletionCallback<PlayerInfo>(progress, cancel);
                _iceI_getPlayerInfo(iceP_playerId, context, synchronous, completed);
                return completed.Task;
            }

            private const string _getPlayerInfo_name = "getPlayerInfo";

            private void _iceI_getPlayerInfo(string iceP_playerId, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<PlayerInfo>(completed);
                outAsync.invoke(
                    _getPlayerInfo_name,
                    Ice.OperationMode.Idempotent,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_playerId);
                    },
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch (PlayerNotExsit)
                        {
                            throw;
                        }
                        catch (Ice.UserException)
                        {
                        }
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        PlayerInfo ret = null;
                        ret = PlayerInfo.ice_read(istr);
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public Ice.AsyncResult<Callback_Player_getPlayerInfo> begin_getPlayerInfo(string playerId, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                return begin_getPlayerInfo(playerId, context, null, null, false);
            }

            public Ice.AsyncResult begin_getPlayerInfo(string playerId, Ice.AsyncCallback callback, object cookie)
            {
                return begin_getPlayerInfo(playerId, new Ice.OptionalContext(), callback, cookie, false);
            }

            public Ice.AsyncResult begin_getPlayerInfo(string playerId, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
            {
                return begin_getPlayerInfo(playerId, context, callback, cookie, false);
            }

            public PlayerInfo end_getPlayerInfo(Ice.AsyncResult asyncResult)
            {
                var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _getPlayerInfo_name);
                var outgoing_ = (IceInternal.OutgoingAsyncT<PlayerInfo>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private Ice.AsyncResult<Callback_Player_getPlayerInfo> begin_getPlayerInfo(string iceP_playerId, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getPlayerInfo_name);
                var completed = new IceInternal.OperationAsyncResultCompletionCallback<Callback_Player_getPlayerInfo, PlayerInfo>(
                    (Callback_Player_getPlayerInfo cb, PlayerInfo ret) =>
                    {
                        if (cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getPlayerInfo_name, cookie, completedCallback);
                _iceI_getPlayerInfo(iceP_playerId, context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static PlayerPrx checkedCast(Ice.ObjectPrx b)
            {
                if (b == null)
                {
                    return null;
                }
                PlayerPrx r = b as PlayerPrx;
                if ((r == null) && b.ice_isA(ice_staticId()))
                {
                    PlayerPrxHelper h = new PlayerPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static PlayerPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if (b == null)
                {
                    return null;
                }
                PlayerPrx r = b as PlayerPrx;
                if ((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    PlayerPrxHelper h = new PlayerPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static PlayerPrx checkedCast(Ice.ObjectPrx b, string f)
            {
                if (b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if (bb.ice_isA(ice_staticId()))
                    {
                        PlayerPrxHelper h = new PlayerPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch (Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static PlayerPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if (b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if (bb.ice_isA(ice_staticId(), ctx))
                    {
                        PlayerPrxHelper h = new PlayerPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch (Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static PlayerPrx uncheckedCast(Ice.ObjectPrx b)
            {
                if (b == null)
                {
                    return null;
                }
                PlayerPrx r = b as PlayerPrx;
                if (r == null)
                {
                    PlayerPrxHelper h = new PlayerPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static PlayerPrx uncheckedCast(Ice.ObjectPrx b, string f)
            {
                if (b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                PlayerPrxHelper h = new PlayerPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::FootStone::GrainInterfaces::Player",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(Ice.OutputStream ostr, PlayerPrx v)
            {
                ostr.writeProxy(v);
            }

            public static PlayerPrx read(Ice.InputStream istr)
            {
                Ice.ObjectPrx proxy = istr.readProxy();
                if (proxy != null)
                {
                    PlayerPrxHelper result = new PlayerPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public abstract class PlayerDisp_ : Ice.ObjectImpl, Player
        {
            #region Slice operations

            public abstract _System.Threading.Tasks.Task<PlayerInfo> getPlayerInfoAsync(string playerId, Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::FootStone::GrainInterfaces::Player",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, Ice.Current current = null)
            {
                return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static _System.Threading.Tasks.Task<Ice.OutputStream>
            iceD_getPlayerInfo(Player obj, IceInternal.Incoming inS, Ice.Current current)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, current.mode);
                var istr = inS.startReadParams();
                string iceP_playerId;
                iceP_playerId = istr.readString();
                inS.endReadParams();
                return inS.setResultTask<PlayerInfo>(obj.getPlayerInfoAsync(iceP_playerId, current),
                    (ostr, ret) =>
                    {
                        PlayerInfo.ice_write(ostr, ret);
                    });
            }

            private static readonly string[] _all =
            {
                "getPlayerInfo",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override _System.Threading.Tasks.Task<Ice.OutputStream>
            iceDispatch(IceInternal.Incoming inS, Ice.Current current)
            {
                int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
                if (pos < 0)
                {
                    throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch (pos)
                {
                    case 0:
                        {
                            return iceD_getPlayerInfo(this, inS, current);
                        }
                    case 1:
                        {
                            return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                        }
                    case 2:
                        {
                            return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                        }
                    case 3:
                        {
                            return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                        }
                    case 4:
                        {
                            return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                        }
                }

                _System.Diagnostics.Debug.Assert(false);
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }
    }
}
